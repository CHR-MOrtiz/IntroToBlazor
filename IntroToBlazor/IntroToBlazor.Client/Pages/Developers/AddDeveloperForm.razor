@page "/add-developer"
@using IntroToBlazor.Client.Enums

@inject NavigationManager NavManager
@inject HttpClient Http;

@rendermode InteractiveServer
@*Form worked only on Server render*@
<h3>Add Developer (Form)</h3>

<Alert AlertMessage ="@AlertMessage" AlertType="@AlertType"/>

@if (developer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@developer" OnValidSubmit="@SubmitDeveloper" FormName="AddDeveloper">
        <DataAnnotationsValidator />
            <div class="mb-3">
            <label for="FirstName" class="form-label">First Name</label>
                <InputText @bind-Value="developer!.FirstName" type="text" class="form-control" id="add-firstname-input" placeholder="First Name"/>

            <label for="LastName" class="form-label">Last Name</label>
                <InputText @bind-Value="developer!.LastName" type="text" class="form-control" id="add-lastname-input" placeholder="Last Name"/>

            <label for="Title" class="form-label">Title</label>
                <InputText @bind-Value="developer!.Title" type="text" class="form-control" id="add-title-input" placeholder="Title"/>

            <label for="City" class="form-label">City</label>
                <InputText @bind-Value="developer!.City" type="text" class="form-control" id="add-city-input" placeholder="City"/>
            </div>
        <button type="submit" class="btn btn-success">Add Developer</button>
        <ValidationSummary />
    </EditForm>
}

    <BackLink BackUrl="@BackUrl" />

@code {



    [Parameter]
    public string? AlertMessage { get; set; }

    [Parameter]
    public AlertTypeEnum AlertType { get; set; }

    [SupplyParameterFromForm]
    public DeveloperModel? developer { get; set; } = new();



    [Parameter]
    public string? BackUrl { get; set; }

    protected override Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        BackUrl = StringQueryParser.ParseQueryString(uri, "uri");

        return base.OnInitializedAsync();
    }

    private async Task SubmitDeveloper()
    {
        var result = await Http.PostAsJsonAsync<DeveloperModel>("/developers", developer!);

        if (result.IsSuccessStatusCode)
        {

            AlertMessage = "Developer added successfully!";
            AlertType = AlertTypeEnum.success;
        }
        else
        {
            AlertMessage = $"A problem occured trying to add developer! (Reason: {result.ReasonPhrase})";
            AlertType = AlertTypeEnum.warning;
        }
    }
}
