@inject HttpClient Http
@inject NavigationManager NavigationManager;

@rendermode InteractiveServer

@attribute [StreamRendering]

<h3>Developers Child Component (Client)</h3>

This child component is <strong>Auto Rendered</strong>.

<h1>CHR Developers</h1>

<p><a href="add-developer?uri=@BackUrl" class="btn btn-success">Add Developer</a></p>

<DeleteDeveloperModal OnSuccessfulDeletion="SuccessfulDeletionAsync" @ref="deleteDeveloperDialog" />

@if(developers is null)
{
    <h3>Loading...</h3>
}
else
{
    <Alert AlertType="@AlertType" AlertMessage="@AlertMessage"/>

    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Title</th>
                <th>City</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var developer in developers)
            {
                <tr>
                    <td>@developer.FirstName</td>
                    <td>@developer.LastName</td>
                    <td>@developer.Title</td>
                    <td>@developer.City</td>
                    <td>
                        <ul class="nav nav-pills">
                            <li class="nav-item">
                                 <button class="btn btn-warning" aria-current="page" @onclick="(() => {
                                     if (developer is not null )
                                    {
                                        NavigatToUpdatePage(developer);

                                   }})" >Update</button>
                            </li>

                            @if (developer.IsActive)
                            {
                                <span>&nbsp;</span>
                                <li class="nav-item">
                                    <a class="btn btn-info" @onclick="(async () => {await ActivateDeactivateDevelopersAsync(developer.Id);})
                                   ">Deactivate</a>
                                </li>
                            }
                            &nbsp;
                            @if (!developer.IsActive)
                            {
                                <li class="nav-item">
                                    <a class="btn btn-info" @onclick="(async () => {await ActivateDeactivateDevelopersAsync(developer.Id);})
                                           ">Activate</a>
                                </li>
                                <span>&nbsp;</span>
                                <li class="nav-item">
                                 <a class="btn btn-danger" @onclick="(() => { if (deleteDeveloperDialog is not null )
                                 {
                                     deleteDeveloperDialog.DeveloperDeleteModal(developer);

                                 }})" >Delete</a>
                                </li>
                            }

                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    //Fields
    private DeleteDeveloperModal? deleteDeveloperDialog;

    private List<DeveloperModel>? developers;

    //Properties - Parameters
    [Parameter]
    public DeveloperModel? Developer { get; set; }

    [Parameter]
    public string? BackUrl { get; set; }

    public AlertTypeEnum AlertType { get; set; }

    public string? AlertMessage { get; set; }

    //Methods
    protected override async Task OnInitializedAsync()
    {
        developers = await GetDevelopersAsync();

        BackUrl = NavigationManager.Uri.ToString();
    }

    private async Task<List<DeveloperModel>?> GetDevelopersAsync()
        => await Http.GetFromJsonAsync<List<DeveloperModel>>("/developers");

    private async Task ActivateDeactivateDevelopersAsync(int? developerId)
    {
        var result = await Http.PostAsJsonAsync<int?>($"/developers-activation/{developerId}", developerId, CancellationToken.None);

        if (result.IsSuccessStatusCode)
        {
            developers = await GetDevelopersAsync();
        }
    }

    protected async Task SuccessfulDeletionAsync() => developers = await GetDevelopersAsync();

    private void NavigatToUpdatePage(DeveloperModel developer)
    {
        Developer = developer;
        NavigationManager.NavigateTo($"/update-developer/{Developer.Id}?uri={BackUrl}", true);
    }
}
